#include "monty.h"

/**
 * divide_top_elements - Divides the second element by the top element of the stack.
 *
 * @stack: Head of the linked list.
 * @line_number: Line number.
 * Return: No return.
 */
void divide_top_elements(stack_t **stack, unsigned int line_number)
{
	int count = 0;
	stack_t *aux = NULL;

	aux = *stack;

	for (; aux != NULL; aux = aux->next, count++)
		;

	if (count < 2)
	{
		dprintf(2, "L%u: can't div, stack too short\n", line_number);
		free_vglo();
		exit(EXIT_FAILURE);
	}

	if ((*stack)->n == 0)
	{
		dprintf(2, "L%u: division by zero\n", line_number);
		free_vglo();
		exit(EXIT_FAILURE);
	}

	aux = (*stack)->next;
	aux->n /= (*stack)->n;
	remove_top_element(stack, line_number);
}

/**
 * multiply_top_elements - Multiplies the top element by the second top element of the stack.
 *
 * @stack: Head of the linked list.
 * @line_number: Line number.
 * Return: No return.
 */
void multiply_top_elements(stack_t **stack, unsigned int line_number)
{
	int count = 0;
	stack_t *aux = NULL;

	aux = *stack;

	for (; aux != NULL; aux = aux->next, count++)
		;

	if (count < 2)
	{
		dprintf(2, "L%u: can't mul, stack too short\n", line_number);
		free_vglo();
		exit(EXIT_FAILURE);
	}

	aux = (*stack)->next;
	aux->n *= (*stack)->n;
	remove_top_element(stack, line_number);
}

/**
 * modulo_top_elements - Computes the remainder of the division of the second element
 * by the top element of the stack.
 *
 * @stack: Head of the linked list.
 * @line_number: Line number.
 * Return: No return.
 */
void modulo_top_elements(stack_t **stack, unsigned int line_number)
{
	int count = 0;
	stack_t *aux = NULL;

	aux = *stack;

	for (; aux != NULL; aux = aux->next, count++)
		;

	if (count < 2)
	{
		dprintf(2, "L%u: can't mod, stack too short\n", line_number);
		free_vglo();
		exit(EXIT_FAILURE);
	}

	if ((*stack)->n == 0)
	{
		dprintf(2, "L%u: division by zero\n", line_number);
		free_vglo();
		exit(EXIT_FAILURE);
	}

	aux = (*stack)->next;
	aux->n %= (*stack)->n;
	remove_top_element(stack, line_number);
}

/**
 * print_char_value - Prints the character value of the first element.
 *
 * @stack: Head of the linked list.
 * @line_number: Line number.
 * Return: No return.
 */
void print_char_value(stack_t **stack, unsigned int line_number)
{
	if (stack == NULL || *stack == NULL)
	{
		dprintf(2, "L%u: can't pchar, stack empty\n", line_number);
		free_vglo();
		exit(EXIT_FAILURE);
	}
	if ((*stack)->n < 0 || (*stack)->n >= 128)
	{
		dprintf(2, "L%u: can't pchar, value out of range\n", line_number);
		free_vglo();
		exit(EXIT_FAILURE);
	}
	printf("%c\n", (*stack)->n);
}

/**
 * print_string - Prints the string represented by the stack.
 *
 * @stack: Head of the linked list.
 * @line_number: Line number.
 * Return: No return.
 */
void print_string(stack_t **stack, unsigned int line_number)
{
	stack_t *aux;
	(void)line_number;

	aux = *stack;

	while (aux && aux->n > 0 && aux->n < 128)
	{
		printf("%c", aux->n);
		aux = aux->next;
	}

	printf("\n");
}

